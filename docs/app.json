[{"name":"app.R","content":"#\r\n# This is a Shiny web application. You can run the application by clicking\r\n# the 'Run App' button above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    http://shiny.rstudio.com/\r\n#\r\n\r\n\r\n### running the packages ##\r\n\r\nrm(list = ls())\r\n\r\npackages <- c(\"shiny\",\"tidyUSDA\",\"tidyverse\",\"sf\",\"here\",\"leaflet\")\r\n\r\nlapply(packages, require,character.only =T)\r\n\r\n####\r\n\r\nkey <- \"D923D273-EDCC-3FA9-AE2B-E5513DD00E06\"\r\n\r\n\r\nyears <- c(\"1976\",\"1977\",\"1978\",\"1979\",\"1980\",\"1981\",\"1982\",\"1983\",\"1984\",\r\n           \"1985\",\"1986\",\"1987\",\"1988\",\"1989\",\"1990\",\"1991\",\"1992\",\"1993\",\r\n           \"1994\",\"1995\",\"1996\",\"1997\",\"1998\",\"1999\",\"2000\",\"2001\",\"2002\",\r\n           \"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\r\n           \"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\r\n           \"2021\",\"2022\")\r\n\r\n\r\nSunflower_Yield <- getQuickstat(sector='CROPS',\r\n                                group = \"FIELD CROPS\",\r\n                                commodity = \"SUNFLOWER\",\r\n                                category = \"YIELD\",\r\n                                domain = \"TOTAL\",\r\n                                key = key,\r\n                                program = 'SURVEY',\r\n                                data_item = \"SUNFLOWER, OIL TYPE - YIELD, MEASURED IN LB / ACRE\",\r\n                                geographic_level = 'COUNTY',\r\n                                year = years)\r\n\r\n\r\n\r\n########### AREA HARVESTED DATA ##### \r\n\r\nArea_Harvested <- getQuickstat(sector='CROPS',\r\n                               group = \"FIELD CROPS\",\r\n                               commodity = \"SUNFLOWER\",\r\n                               category = \"AREA HARVESTED\",\r\n                               domain = \"TOTAL\",\r\n                               key = key,\r\n                               program = 'SURVEY',\r\n                               data_item = \"SUNFLOWER, OIL TYPE - ACRES HARVESTED\",\r\n                               geographic_level = 'COUNTY',\r\n                               year = years)\r\n\r\n\r\n\r\n###### AREA PLANTED DATA #### \r\n\r\nArea_Planted <- getQuickstat(sector='CROPS',\r\n                             group = \"FIELD CROPS\",\r\n                             commodity = \"SUNFLOWER\",\r\n                             category = \"AREA PLANTED\",\r\n                             domain = \"TOTAL\",\r\n                             key = key,\r\n                             program = 'SURVEY',\r\n                             data_item = \"SUNFLOWER, OIL TYPE - ACRES PLANTED\",\r\n                             geographic_level = 'COUNTY',\r\n                             year = years)\r\n\r\n\r\n\r\n#########\r\n###  Cleaning the downloaded datasets ###\r\n######## \r\n\r\nSunflower_Yield <- Sunflower_Yield %>% \r\n                         dplyr::filter(county_name != \"OTHER (COMBINED) COUNTIES\") %>%\r\n                         dplyr::filter(county_name != \"OTHER COUNTIES\") %>%\r\n                         dplyr::filter(state_name != \"CALIFORNIA\") %>%\r\n                         dplyr::select(year,state_alpha,county_name,Value) %>%\r\n                         dplyr::rename(YEAR = year,\r\n                                       YIELD = Value,\r\n                                       STATE = state_alpha,\r\n                                       COUNTYNAME = county_name) %>% \r\n                                mutate(COUNTYNAME = gsub(\" \",\"_\",COUNTYNAME))\r\n                         \r\n\r\nArea_Harvested <- Area_Harvested %>% \r\n                            dplyr::filter(county_name != \"OTHER (COMBINED) COUNTIES\") %>%\r\n                            dplyr::filter(county_name != \"OTHER COUNTIES\") %>%\r\n                            dplyr::filter(state_name != \"CALIFORNIA\") %>%\r\n                            dplyr::select(year,state_alpha,county_name,Value) %>%\r\n                            dplyr::rename(YEAR = year,\r\n                                          ACRES_HARVESTED = Value,\r\n                                          STATE = state_alpha,\r\n                                          COUNTYNAME = county_name) %>% \r\n                            mutate(COUNTYNAME = gsub(\" \",\"_\",COUNTYNAME))\r\n\r\n\r\nArea_Planted <- Area_Planted %>% \r\n                       dplyr::filter(county_name != \"OTHER (COMBINED) COUNTIES\") %>%\r\n                       dplyr::filter(county_name != \"OTHER COUNTIES\") %>%\r\n                       dplyr::filter(state_name != \"CALIFORNIA\") %>%\r\n                       dplyr::select(year,state_alpha,county_name,Value) %>%\r\n                       dplyr::rename(YEAR = year,\r\n                                     ACRES_PLANTED = Value,\r\n                                     STATE = state_alpha,\r\n                                     COUNTYNAME = county_name) %>% \r\n                       mutate(COUNTYNAME = gsub(\" \",\"_\",COUNTYNAME))\r\n\r\n\r\n########\r\n#### Joining the area planted, harvested and yield datasets ###\r\n###### \r\n\r\nSunflower <- list(Sunflower_Yield,Area_Planted,\r\n                  Area_Harvested) %>% \r\n                         purrr::reduce(inner_join) \r\n                                 \r\n\r\n#### read in the state shape file #### \r\n\r\nStates <- st_read(here(\"Datasets\",\"US_county_centroids\",\r\n                       \"c_08mr23.shp\")) %>% \r\n                            dplyr::mutate(COUNTYNAME = str_to_upper(COUNTYNAME)) %>% \r\n                            dplyr::select(STATE,COUNTYNAME,LON,LAT,geometry)\r\nst_crs(States)\r\n\r\n### Lets join the two ### \r\n### and filter the counties which have only one representation\r\n\r\nSunflower <- Sunflower %>% \r\n                 inner_join(States)\r\n\r\n\r\n######### removing counties which have only occured once in the dataset and also,\r\n## removing years where we have only one county \r\n\r\nSunflower <- Sunflower %>%\r\n                  # Remove counties that only occur once in the dataset\r\n                  group_by(COUNTYNAME) %>%\r\n                  filter(n() > 1) %>%\r\n                  ungroup() %>%\r\n                  # Remove years where only one county is represented\r\n                  group_by(YEAR) %>%\r\n                  filter(n() > 1) %>%\r\n                  ungroup() %>%\r\n                 # Remove state-year combinations with only one county or no yield values\r\n                 group_by(STATE, YEAR) %>%\r\n                  filter(n_distinct(COUNTYNAME) > 1 & any(!is.na(YIELD))) %>%\r\n                  ungroup() %>%\r\n                # Convert to simple features object (if your data is spatial)\r\n                  st_as_sf()\r\n\r\n\r\n\r\n# UI code\r\n# UI code\r\n\r\nui <- bootstrapPage(\r\n  tags$style(type = \"text/css\", \"html, body {width:100%;height:100%}\"),\r\n  leafletOutput(\"map\", width = \"100%\", height = \"100%\"),\r\n  absolutePanel(top = 10, right = 10,\r\n                selectInput(\"state\", \"State:\", \r\n                            choices = unique(Sunflower$STATE),\r\n                            selected = unique(Sunflower$STATE)[1]),\r\n                sliderInput(\"year\", \"Year:\",\r\n                            min = min(Sunflower$YEAR), \r\n                            max = max(Sunflower$YEAR),\r\n                            value = min(Sunflower$YEAR),\r\n                            sep = \"\",\r\n                            step = 1)\r\n  )\r\n)\r\n\r\n# Server code\r\nserver <- function(input, output, session) {  # Added session argument\r\n  \r\n  df <- reactive({\r\n    Sunflower %>% \r\n      filter(YEAR == input$year & STATE == input$state)\r\n  })\r\n  \r\n  observeEvent(input$state, {\r\n    year_range <- range(Sunflower$YEAR[Sunflower$STATE == input$state])\r\n    updateSliderInput(session, \"year\",\r\n                      min = year_range[1],\r\n                      max = year_range[2],\r\n                      value = year_range[1])\r\n  })\r\n  \r\n  output$map <- renderLeaflet({\r\n    req(nrow(df()) > 0)  # Ensure there is data to plot\r\n    pal <- colorNumeric(palette = \"YlGnBu\", \r\n                        domain = df()$YIELD)\r\n    leaflet(df()) %>%\r\n      addProviderTiles(providers$CartoDB.Positron) %>%\r\n      addPolygons(\r\n        fillColor = ~pal(YIELD),\r\n        fillOpacity = 0.7, \r\n        color = \"#BDBDC3\", \r\n        weight = 1,\r\n        label = ~paste0(\"County: \", COUNTYNAME, \r\n                        \" Yield: \", YIELD),\r\n        labelOptions = labelOptions(\r\n          style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\r\n          textsize = \"15px\",\r\n          direction = \"auto\"\r\n        )\r\n      ) %>%\r\n      addLegend(pal = pal, values = ~YIELD, \r\n                title = \"Yield per County\",\r\n                position = \"bottomright\")\r\n  })\r\n}\r\n\r\n# Run the Shiny app\r\nshinyApp(ui, server)\r\n\r\n\r\n\r\n\r\n\r\n","type":"text"}]
